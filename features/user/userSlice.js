const createSlice = require("@reduxjs/toolkit").createSlice;
const { createAsyncThunk } = require("@reduxjs/toolkit");
const axios = require("axios").default;

const initialState = {
  loading: false,
  users: [],
  error: "",
};

//Generates pending, fulfilled and rejected action types
const fetchUsers = createAsyncThunk("user/fetchUsers", async () => {
  const response = await axios.get(
    "https://jsonplaceholder.typicode.com/users"
  );
  const users = response.data.map((user) => user.id);
  return users;
});

const userSlice = createSlice({
  name: "user",
  initialState,
  /*To add asyncThunk middlewares is needed to add every one 
  of the three action cases generated by createAsyncThunk.
  This field is only to listen the events and modify the state,
  it does not create the actions*/
  extraReducers: (builder) => {
    builder.addCase(fetchUsers.pending, (state) => {
      state.loading = true;
      state.users = [];
      state.error = "";
    });
    builder.addCase(fetchUsers.fulfilled, (state, action) => {
      state.loading = false;
      state.users = action.payload;
      state.error = "";
    });
    builder.addCase(fetchUsers.rejected, (state, action) => {
      state.loading = false;
      state.users = [];
      state.error = action.error.message;
    });
  },
});

//Export both the slice reducer (as default) and the actions (as name export)
module.exports = userSlice.reducer;
/*In this case the actions from the slice are not exported, but from the
result of createAsyncThunk*/
module.exports.fetchUsers = fetchUsers;
